syntax = "proto3";

package tdex.v1;

import "tdex/v1/swap.proto";
import "tdex/v1/types.proto";
import "google/api/annotations.proto";

service Trade {
  // Markets: List all the markets open for trading.
  rpc Markets(MarketsRequest) returns (MarketsReply){
    option (google.api.http) = {
      get: "/v1/trade/markets"
    };
  }

  // Balances: Gets the balances of the two current reserves in the given
  // market.
  rpc Balances(BalancesRequest) returns (BalancesReply){
    option (google.api.http) = {
      post: "/v1/trade/balance"
      body: "*"
    };
  }

  // MarketPrice: Gets the current market price. In case of AMM startegy, the
  // trade type and
  // the amount of asset to be either sent or received.
  //
  // BUY = quote asset as input
  // SELL = base asset as input
  //
  // If the type of the trade is BUY it means the base asset will be received by
  // the trader.
  //
  // If the type of the trade is SELL it means the base asset will be sent by
  // the trader.
  rpc MarketPrice(MarketPriceRequest) returns (MarketPriceReply){
    option (google.api.http) = {
      post: "/v1/trade/price"
    };
  }

  // DEPRECATED TradePropose: Sends a swap request message containing a partial signed
  // transaction.
  //
  // BUY = quote asset as input
  // SELL = base asset as input
  //
  //
  // If the type of the trade is BUY it means the base asset will be received by
  // the trader.
  //
  // If the type of the trade is SELL it means the base asset will be sent by
  // the trader.
  rpc TradePropose(TradeProposeRequest) returns (stream TradeProposeReply){
    option (google.api.http) = {
      post: "/v1/trade/stream/propose"
      body: "*"
    };
  }

  // Unary RPC for TradePropose.
  rpc ProposeTrade(ProposeTradeRequest) returns (ProposeTradeReply){
    option (google.api.http) = {
      post: "/v1/trade/unary/propose"
      body: "*"
    };
  }


  // DEPRECATED TradeComplete: Sends the trader's counter-signed transaction to the
  // provider. If something wrong, a swap fail message is sent. It returns the
  // transaction hash of the broadcasted transaction.
  rpc TradeComplete(TradeCompleteRequest) returns (stream TradeCompleteReply){
    option (google.api.http) = {
      post: "/v1/trade/stream/complete"
      body: "*"
    };
  }
  
  // Unary RPC for TradeComplete.
  rpc CompleteTrade(CompleteTradeRequest) returns (CompleteTradeReply){
    option (google.api.http) = {
      post: "/v1/trade/unary/complete"
      body: "*"
    };
  }
}

// BOTD#4 Service's messages
message MarketsRequest {}
message MarketsReply { repeated MarketWithFee markets = 1; }

message BalancesRequest { Market market = 1; }
message BalancesReply { repeated BalanceWithFee balances = 1; }


enum TradeType {
  BUY = 0;
  SELL = 1;
}

message MarketPriceRequest {
  Market market = 1;
  TradeType type = 2;
  uint64 amount = 3;
  string asset = 4;
}
message MarketPriceReply { repeated PriceWithFee prices = 1; }

message TradeProposeRequest {
  Market market = 1;
  TradeType type = 2;
  SwapRequest swap_request = 3;
}
message TradeProposeReply {
  SwapAccept swap_accept = 1;
  SwapFail swap_fail = 2;
  uint64 expiry_time_unix = 3;
}

message TradeCompleteRequest {
  SwapComplete swap_complete = 1;
  SwapFail swap_fail = 2;
}
message TradeCompleteReply {
  string txid = 1;
  SwapFail swap_fail = 2;
}

message ProposeTradeRequest {
  Market market = 1;
  TradeType type = 2;
  SwapRequest swap_request = 3;
}
message ProposeTradeReply {
  SwapAccept swap_accept = 1;
  SwapFail swap_fail = 2;
  uint64 expiry_time_unix = 3;
}

message CompleteTradeRequest {
  SwapComplete swap_complete = 1;
  SwapFail swap_fail = 2;
}
message CompleteTradeReply {
  string txid = 1;
  SwapFail swap_fail = 2;
}
